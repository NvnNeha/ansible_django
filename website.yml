---
- name: Deploy Django Blog on EC2 Instances with tag
  hosts: all
  become: yes
  vars:
    repo_url: "https://github.com/NvnNeha/django_blog.git"
    app_dir: "/home/ubuntu/django_blog/nvnblog"
    git_clone: "/home/ubuntu/django_blog"
    create_venv_dir: "/home/ubuntu/"
    project_env: "/home/ubuntu/project_env"
    gunicorn_service: |
      [Unit]
      Description=gunicorn daemon for django_blog
      Requires=gunicorn.socket
      After=network.target

      [Service]
      User=ubuntu
      Group=www-data
      WorkingDirectory={{ app_dir }}
      ExecStart={{ project_env }}/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunicorn.sock nvnblog.wsgi:application

      [Install]
      WantedBy=multi-user.target
    gunicorn_socket: |
      [Unit]
      Description=gunicorn socket

      [Socket]
      ListenStream=/run/gunicorn.sock

      [Install]
      WantedBy=sockets.target
    nginx_conf: |
      server {
          listen 80;
          server_name www.naveenkumarsaini.click;
          location = /favicon.ico { access_log off; log_not_found off; }
          location / {
              include proxy_params;
              proxy_pass http://unix:/run/gunicorn.sock;
          }
      }
  tasks:
    - name: Install packages
      apt:
        name:
          - python3-dev
          - python3-pip
          - virtualenv
          - nginx
          - libpq-dev
        state: present
        update_cache: yes

    - name: Clone Django Blog repo
      git:
        repo: "{{ repo_url }}"
        dest: "{{ git_clone }}"
        version: "main"
      notify: Restart Gunicorn

    - name: Create Python virtual environment
      command: virtualenv {{ project_env }}
      args:
        creates: "{{ project_env }}/bin/activate"

    - name: Install Python requirements
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ project_env }}"
        virtualenv_python: python3

    - name: Create systemd gunicorn service file
      copy:
        dest: /etc/systemd/system/gunicorn.service
        content: "{{ gunicorn_service }}"
        owner: root
        group: root
        mode: '0644'

    - name: Create systemd gunicorn socket file
      copy:
        dest: /etc/systemd/system/gunicorn.socket
        content: "{{ gunicorn_socket }}"
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd
      command: systemctl daemon-reload

    - name: Enable and start gunicorn.socket
      systemd:
        name: gunicorn.socket
        enabled: yes
        state: started

    - name: Enable and start gunicorn.service
      systemd:
        name: gunicorn.service
        enabled: yes
        state: started

    - name: Add user 'ubuntu' to group 'www-data'
      ansible.builtin.user:
        name: ubuntu
        groups: www-data
        append: yes  # ensures the user keeps existing group memberships

    - name: Configure nginx site
      copy:
        dest: /etc/nginx/sites-available/django_blog
        content: "{{ nginx_conf }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/django_blog
        dest: /etc/nginx/sites-enabled/django_blog
        state: link
        force: yes

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes
    - name: Upload .env file to Django project
      copy:
        src: files/.env
        dest: "{{ app_dir }}/.env"
        owner: ubuntu
        group: ubuntu
        mode: '0600'

  handlers:
    - name: Restart Gunicorn
      systemd:
        name: gunicorn
        state: restarted
